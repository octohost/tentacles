worker_processes  1;
error_log logs/error.log;
events {
  worker_connections 1024;
}
http {
  server {
    listen 8080;
    location /redis_set_container {
      set_unescape_uri $name $arg_name;
      set_unescape_uri $endpoint $arg_endpoint;
      redis2_query set $name $endpoint;

      redis2_pass localhost:6379;

      error_page 500 501 502 503 504 505 @redis_error;
    }
    location = /redis_get_container {
      echo "args: $args";
      set_unescape_uri $name $arg_name;
      redis2_query get $name;

      redis2_pass localhost:6379;

      error_page 500 501 502 503 504 505 @redis_error;
    }

    # instead of causing a 500 error for the user:
    location = @redis_error {
      internal;
      content_by_lua 'ngx.print("ignore_this_error");';
    }

    location / {
      if ($host ~* (.*)\.myapp\.com) {
        set $upstream "";
        set $subdomain $1;
	rewrite_by_lua '
         local parser = require "redis.parser";
         local name = ngx.var["subdomain"];
         local result = ngx.location.capture("/redis_get_container", { args = { name = name }});
         local response_table = {};
         i = 0 
         for token in string.gmatch(result.body, "[^%s]+") do
           response_table[i] = token;
           i = i + 1
         end
          ngx.var.upstream = response_table[1]
        ';
        proxy_pass http://$upstream;
      }
    }
  }

}

