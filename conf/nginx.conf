worker_processes  1;
error_log logs/error.log;
events {
  worker_connections 1024;
}
http {
  server {
    listen 8080;
    location /redis_set {
      set_unescape_uri $domain $arg_domain;
      set_unescape_uri $endpoint $arg_endpoint;
      redis2_query set $domain $endpoint;

      redis2_pass localhost:6379;

      error_page 500 501 502 503 504 505 @redis_error;
    }
    location = /redis_get {
      set_unescape_uri $domain $arg_domain;
      redis2_query get $domain;

      redis2_pass localhost:6379;

      error_page 500 501 502 503 504 505 @redis_error;
    }

    # instead of causing a 500 error for the user:
    location = @redis_error {
      internal;
      content_by_lua 'ngx.print("ignore_this_error");';
    }

    location / {
      set $upstream "";
      set $domain $host;
      rewrite_by_lua '
        local parser = require "redis.parser"
        local domain = ngx.var["domain"]
        local result = ngx.location.capture("/redis_get", { args = { domain = domain }})
         
        local res, typ = parser.parse_reply(result.body)
        if typ == parser.BAD_REPLY then
          -- res is the textual error message from the parser
        elseif typ == parser.ERROR_REPLY then
          -- res is the error message from the redis2 server
        elseif typ == parser.BULK_REPLY then
          -- res is a string for the bulk data
          ngx.var.upstream = res
        end
      ';
      proxy_pass http://$upstream;
    }
  }

}

