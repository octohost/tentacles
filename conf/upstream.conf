server {
  listen 80;
  location /get {
    internal;
    proxy_pass http://127.0.0.1:8080/get;
  }

  location / {
    set $upstream "";
    set $domain $host;
    rewrite_by_lua '
      local parser = require "redis.parser"
      local domain = ngx.var["domain"]
      local result = ngx.location.capture("/get", { args = { domain = domain }})

      local res, typ = parser.parse_reply(result.body)
      -- No endpoint data was found for that domain.
      if (res == nil) then
        ngx.exit(ngx.HTTP_NOT_FOUND)
      end
      if typ == parser.BAD_REPLY then
        -- res is the textual error message from the parser
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      elseif typ == parser.ERROR_REPLY then
        -- res is the error message from the redis2 server
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      elseif typ == parser.BULK_REPLY then
        -- res is a string for the bulk data
        ngx.log(ngx.INFO, res)
        -- Endpoint data was found for that domain.
        -- Set the upstream variable to the endpoint data.
        ngx.var.upstream = res
      end
    ';
    proxy_pass http://$upstream;
  }
}
